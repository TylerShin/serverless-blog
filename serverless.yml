# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: tylor-blog # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs4.3

# you can overwrite defaults here
  stage: production # Override this with command-line option when you deploy to production
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can add packaging information here
package:
  # include: 
    # - ./dist/bundle.js
    # - ./dist/version
#  exclude:
#    - exclude-me.js
 artifact: dist.zip

functions:
  ssr:
    handler: handlers.ssr
    events:
      - http:
          method: get
          path: ${self:service}
      - http:
          method: any
          path: ${self:service}/{proxy+}
  # writePosts:
  #   handler: handlers.writePosts
  #   events:
  #     - http:
  #         method: post
  #         path: ${self:service}/posts/new
  #         cors: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000

# you can add CloudFormation resource templates here
resources:
  Resources:
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: serverlessBlogPosts
        AttributeDefinitions:
          - AttributeName: postId
            AttributeType: S
        KeySchema:
          - AttributeName: postId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
          
    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTable
      Properties:
        PolicyName: AmazonDynamoDBFullAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
              Resource: arn:aws:dynamodb:*:*:table/serverlessBlogPosts
        Roles:
          - Ref: IamRoleLambdaExecution
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          DefaultRootObject: ''
          Enabled: true
          ViewerCertificate:
            AcmCertificateArn: arn:aws:acm:us-east-1:624950342265:certificate/7b8b7f19-faa9-44f3-90be-038a38329160
            SslSupportMethod: sni-only
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - HEAD
              - GET
            ForwardedValues:
              QueryString: true
              Headers:
                - original-uri
                - User-Agent
                - X-Forwarded-For
            TargetOriginId: "${self:service}-${self:provider.stage}-api-gateway"
            ViewerProtocolPolicy: redirect-to-https
          Aliases: # Add domain names to allow to access. You must add Route53 addresses here.
            - tylorsh.in
            - www.tylorsh.in
          Origins:
          - CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
            DomainName:
              "Fn::Join": ["", [{"Ref": "ApiGatewayRestApi"}, ".execute-api.${self:provider.region}.amazonaws.com"]]
            Id: "${self:service}-${self:provider.stage}-api-gateway"
            OriginPath: /${self:provider.stage}/${self:service}
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
